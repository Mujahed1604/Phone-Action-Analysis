# -*- coding: utf-8 -*-
"""Group8_MIS6382.003.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EnDNUbn5EzIc4Rndd7hy2dotyfoJu0af
"""

class Phone:
    def __init__(self, date, model, company, phone_type, rating, price, battery_health):
        self.date = date
        self.model = model
        self.company = company
        self.type = phone_type
        self.rating = rating
        self.price = price
        self.battery_health = battery_health
        self.unique_id = id(self)

    def __str__(self):
      attr =[
          str(self.unique_id),
          str(self.date),
          str(self.model),
          str(self.company),
          str(self.type),
          str(self.rating),
          str(self.price),
          str(self.battery_health)
      ]
      return ','.join(attr)

phone1 = Phone('12th May 2023','Galaxy S23 Ultra','Samsung','Android',9.9,999.99,99)
str(phone1)

class ApplePhone(Phone):
    def __init__(self, date, model, rating, price, battery_health):
        # Calling the constructor of the parent class (Phone) with phone_type set to "iPhone"
        super().__init__(date, model, "Apple", "iPhone", rating, price, battery_health)
        self.ios_version = None


class AndroidPhone(Phone):
    def __init__(self, date, model, rating, price, battery_health):
        # Calling the constructor of the parent class (Phone) with phone_type set to "android"
        super().__init__(date, model, "Android", "android", rating, price, battery_health)
        self.android_version = None

class IPhone(ApplePhone):
    def __init__(self, date, model, rating, price, battery_health):
        super().__init__(date, model, rating, price, battery_health)
        self.company = "IPhone"

class Google(AndroidPhone):
    def __init__(self, date, model, rating, price, battery_health):
        super().__init__(date, model, rating, price, battery_health)
        self.company = "Google"

class Samsung(AndroidPhone):
    def __init__(self, date, model, rating, price, battery_health):
        super().__init__(date, model, rating, price, battery_health)
        self.company = "Samsung"

googlePhone = Google("2022-11-15","modelA", 2, 641, 86.06)
print(str(googlePhone))

#import the modules
import pickle

with open('phonepkl308.dat', 'rb') as fb:
  try: # start of the try block
    while True: # this while loop will be alway entered since the conditional expression will always be True
      phone = pickle.load(fb) #use the pickle module's load statement to read the object

  except EOFError: #code execution will transfer here when the EOF condition is encountered
    pass

print(len(phone))

for i in phone[:10]:
  print(str(i))

with open('data.csv', 'w') as f:
  f.write("unique_id,date,model,company,type,rating,price,battery_health\n")
  for obj in phone:
    f.write(str(obj)+'\n')

#Reading the csv file and Filling out the missing data
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('data.csv')

df.info()

df.isnull().sum()

#total no, of missing values
df.isnull().sum().sum()

#total data frame size
df.size

#total number of rows and cols in data frame
df.shape

#percentage of missing values
df.isnull().sum().sum()/df.size*100

#aggregate measures across whole cols
print(df['date'].mode()[0])
print(df['rating'].mean())

#aggregate measures at the level of granuality of model
print(df.groupby('model')['rating'].mean())
print('-------------------------------------------------------------------')
print(df.groupby('model')['price'].mean())
print('-------------------------------------------------------------------')
print(df.groupby('model')['battery_health'].mean())

#accessing specific aggregate measures at the level of granuality of 'model'
print(df.groupby('model')['rating'].mean()[0])
print('--------------------------------------------------------------')
print(df.groupby('model')['price'].mean()[1])
print('--------------------------------------------------------------')
print(df.groupby('model')['battery_health'].mean()[2])

#Cols with missing values
cols=['date', 'rating', 'price', 'battery_health']

#Filling in missing values with aggregate mean at level of granularity of 'model'
df['rating'] = df.groupby('model')['rating'].transform(lambda x: x.fillna(x.mean()))
df['price'] = df.groupby('model')['price'].transform(lambda x: x.fillna(x.mean()))
df['battery_health'] = df.groupby('model')['battery_health'].transform(lambda x: x.fillna(x.mean()))

# Filling in the missing value of date through mode within each model group
df['date'] = df.groupby('model')['date'].transform(lambda x: x.fillna(x.mode()[0]))

df.isna().sum()

#total number of rows and cols in data frame
df.shape

"""## **DATA VISUALISATION**"""

import matplotlib.pyplot as plt
print(df['model'].value_counts())
df['model'].value_counts().plot(kind='bar')

#boxplot here


plt.figure(figsize=(8,8))

#Creating a boxplot
df.boxplot(column='battery_health', by='model', figsize=(10,10), grid=False )

plt.title('Battery Health Distribution by model')
plt.xlabel('Model')
plt.ylabel('Battery Health')

plt.show()

#Plotting boxplot for price distribution by model
df.boxplot(column='price', by='model', figsize=(10,10), grid=False )

plt.title('Price Distribution by model')
plt.xlabel('Model')
plt.ylabel('Price')

plt.show()

#line plot

df['date'] = pd.to_datetime(df['date'])

#Sorting data
df= df.sort_values('date')

#Calculating average rating for each day
mean_of_rating= df.groupby('date')['rating'].mean()

#Plotting a line plot
plt.figure(figsize=(10,10))
plt.plot(mean_of_rating.index, mean_of_rating.values, marker='o', linestyle='-')

plt.title('Average rating of phones over time')
plt.xlabel('Date')
plt.ylabel('Rating (Mean)')

plt.show()

#Scatter plot

plt.figure(figsize=(20, 15))

plt.title('Price of Phones Over Time')
plt.xlabel('Date')
plt.ylabel('Price')

plt.scatter(df[df['model'] == 'Galaxy 4']['date'], df[df['model'] == 'Galaxy 4']['price'], c='violet', label='Galaxy 4')
plt.scatter(df[df['model'] == 'Galaxy 5']['date'], df[df['model'] == 'Galaxy 5']['price'], c='indigo', label='Galaxy 5')
plt.scatter(df[df['model'] == 'Galaxy 6']['date'], df[df['model'] == 'Galaxy 6']['price'], c='blue', label='Galaxy 6')
plt.scatter(df[df['model'] == 'Pixel 5']['date'], df[df['model'] == 'Pixel 5']['price'], c='green', label='Pixel 5')
plt.scatter(df[df['model'] == 'Pixel 6']['date'], df[df['model'] == 'Pixel 6']['price'], c='yellow', label='Pixel 6')
plt.scatter(df[df['model'] == 'iphone 5']['date'], df[df['model'] == 'iphone 5']['price'], c='orange', label='iPhone 5')
plt.scatter(df[df['model'] == 'iphone 6']['date'], df[df['model'] == 'iphone 6']['price'], c='red', label='iPhone 6')
plt.scatter(df[df['model'] == 'iphone 7']['date'], df[df['model'] == 'iphone 7']['price'], c='black', label='iPhone 7')

plt.legend()

plt.show()

# histogram

plt.title('Price distribution for All Models')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.hist(df['price'])
plt.show()

#Pie-chart

selected_column = 'type'

column_counts = df[selected_column].value_counts()

# Create a pie chart
plt.figure(figsize=(8, 8))
plt.pie(column_counts, labels=column_counts.index, autopct='%1.1f%%', startangle=90, counterclock=False, labeldistance=1.1, shadow='true')
plt.title(f'Distribution of {selected_column.capitalize()}')
plt.show()

print(f"Number of Android phones: {column_counts['android']}")
print(f"Number of Apple phones: {column_counts['apple']}")

#HeatMap
import seaborn as sns

heatmap_data = df.pivot_table(index='model', columns='rating', aggfunc='size', fill_value=0)

# Create a heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(heatmap_data, annot=True, fmt='d', cmap='crest', cbar_kws={'label': 'Number of Phones'})
plt.title('Distribution of Ratings for Each Phone Model')
plt.show()

import pandas as pd
import numpy as np

df = pd.read_csv('data.csv')

df_cleaned = df.dropna(subset=['price'])

median_price = np.median(df_cleaned['price'])

print(f"The median price of all phones in the dataset is: ${median_price:.2f}")